// Generated by @wagmi/cli@0.1.11 on 4/1/2023 at 4:09:30 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";
import {
  bonusDistributorABI,
  dailyPoolABI,
  erc20ABI,
  poolManagerABI,
} from "./abi";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, "allowance">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, "balanceOf">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, "decimals">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, "name">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, "symbol">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, "totalSupply">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, "approve">({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, "transfer">({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, "transferFrom">({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link poolManagerABI}__.
 */
export function usePoolManager(
  config: Omit<UseContractConfig, "abi"> = {} as any
) {
  return useContract({ abi: poolManagerABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__.
 */
export function usePoolManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poolManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"BNBOracle"`.
 */
export function usePoolManagerBnbOracle<
  TSelectData = ReadContractResult<typeof poolManagerABI, "BNBOracle">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "BNBOracle", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "BNBOracle",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "BNBOracle", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"bonusPoolPercentForEveryone"`.
 */
export function usePoolManagerBonusPoolPercentForEveryone<
  TSelectData = ReadContractResult<
    typeof poolManagerABI,
    "bonusPoolPercentForEveryone"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolManagerABI,
      "bonusPoolPercentForEveryone",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "bonusPoolPercentForEveryone",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "bonusPoolPercentForEveryone", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"currentDay"`.
 */
export function usePoolManagerCurrentDay<
  TSelectData = ReadContractResult<typeof poolManagerABI, "currentDay">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "currentDay", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "currentDay",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "currentDay", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"distributorFee"`.
 */
export function usePoolManagerDistributorFee<
  TSelectData = ReadContractResult<typeof poolManagerABI, "distributorFee">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "distributorFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "distributorFee",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "distributorFee", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"getOwner"`.
 */
export function usePoolManagerGetOwner<
  TSelectData = ReadContractResult<typeof poolManagerABI, "getOwner">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "getOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "getOwner",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "getOwner", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"isAllowed"`.
 */
export function usePoolManagerIsAllowed<
  TSelectData = ReadContractResult<typeof poolManagerABI, "isAllowed">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "isAllowed", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "isAllowed",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "isAllowed", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"pools"`.
 */
export function usePoolManagerPools<
  TSelectData = ReadContractResult<typeof poolManagerABI, "pools">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "pools", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "pools",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "pools", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"poolsToShareReward"`.
 */
export function usePoolManagerPoolsToShareReward<
  TSelectData = ReadContractResult<typeof poolManagerABI, "poolsToShareReward">
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolManagerABI,
      "poolsToShareReward",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "poolsToShareReward",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "poolsToShareReward", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"priceOfACCU"`.
 */
export function usePoolManagerPriceOfAccu<
  TSelectData = ReadContractResult<typeof poolManagerABI, "priceOfACCU">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "priceOfACCU", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "priceOfACCU",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "priceOfACCU", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"priceOfBNB"`.
 */
export function usePoolManagerPriceOfBnb<
  TSelectData = ReadContractResult<typeof poolManagerABI, "priceOfBNB">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "priceOfBNB", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "priceOfBNB",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "priceOfBNB", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"priceOfBUSD"`.
 */
export function usePoolManagerPriceOfBusd<
  TSelectData = ReadContractResult<typeof poolManagerABI, "priceOfBUSD">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "priceOfBUSD", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "priceOfBUSD",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "priceOfBUSD", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"priceOfTRUTH"`.
 */
export function usePoolManagerPriceOfTruth<
  TSelectData = ReadContractResult<typeof poolManagerABI, "priceOfTRUTH">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "priceOfTRUTH", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "priceOfTRUTH",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "priceOfTRUTH", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"priceOfToken"`.
 */
export function usePoolManagerPriceOfToken<
  TSelectData = ReadContractResult<typeof poolManagerABI, "priceOfToken">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "priceOfToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "priceOfToken",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "priceOfToken", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"protocolFee"`.
 */
export function usePoolManagerProtocolFee<
  TSelectData = ReadContractResult<typeof poolManagerABI, "protocolFee">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "protocolFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "protocolFee",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "protocolFee", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"protocolFeeReceiver"`.
 */
export function usePoolManagerProtocolFeeReceiver<
  TSelectData = ReadContractResult<typeof poolManagerABI, "protocolFeeReceiver">
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolManagerABI,
      "protocolFeeReceiver",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "protocolFeeReceiver",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "protocolFeeReceiver", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"tokenOracle"`.
 */
export function usePoolManagerTokenOracle<
  TSelectData = ReadContractResult<typeof poolManagerABI, "tokenOracle">
>(
  config: Omit<
    UseContractReadConfig<typeof poolManagerABI, "tokenOracle", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolManagerABI,
    functionName: "tokenOracle",
    ...config,
  } as UseContractReadConfig<typeof poolManagerABI, "tokenOracle", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__.
 */
export function usePoolManagerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolManagerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof poolManagerABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolManagerABI, TFunctionName>({
    abi: poolManagerABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"changeOwner"`.
 */
export function usePoolManagerChangeOwner<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolManagerABI, "changeOwner">["abi"],
        "changeOwner"
      > & { functionName?: "changeOwner" }
    : UseContractWriteConfig<TMode, typeof poolManagerABI, "changeOwner"> & {
        abi?: never;
        functionName?: "changeOwner";
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolManagerABI, "changeOwner">({
    abi: poolManagerABI,
    functionName: "changeOwner",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"momentOfTruth"`.
 */
export function usePoolManagerMomentOfTruth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolManagerABI,
          "momentOfTruth"
        >["abi"],
        "momentOfTruth"
      > & { functionName?: "momentOfTruth" }
    : UseContractWriteConfig<TMode, typeof poolManagerABI, "momentOfTruth"> & {
        abi?: never;
        functionName?: "momentOfTruth";
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolManagerABI, "momentOfTruth">({
    abi: poolManagerABI,
    functionName: "momentOfTruth",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setBonusPoolPercentForEveryone"`.
 */
export function usePoolManagerSetBonusPoolPercentForEveryone<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolManagerABI,
          "setBonusPoolPercentForEveryone"
        >["abi"],
        "setBonusPoolPercentForEveryone"
      > & { functionName?: "setBonusPoolPercentForEveryone" }
    : UseContractWriteConfig<
        TMode,
        typeof poolManagerABI,
        "setBonusPoolPercentForEveryone"
      > & {
        abi?: never;
        functionName?: "setBonusPoolPercentForEveryone";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof poolManagerABI,
    "setBonusPoolPercentForEveryone"
  >({
    abi: poolManagerABI,
    functionName: "setBonusPoolPercentForEveryone",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setDistributorFee"`.
 */
export function usePoolManagerSetDistributorFee<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolManagerABI,
          "setDistributorFee"
        >["abi"],
        "setDistributorFee"
      > & { functionName?: "setDistributorFee" }
    : UseContractWriteConfig<
        TMode,
        typeof poolManagerABI,
        "setDistributorFee"
      > & {
        abi?: never;
        functionName?: "setDistributorFee";
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolManagerABI, "setDistributorFee">({
    abi: poolManagerABI,
    functionName: "setDistributorFee",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setIsAllowed"`.
 */
export function usePoolManagerSetIsAllowed<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolManagerABI,
          "setIsAllowed"
        >["abi"],
        "setIsAllowed"
      > & { functionName?: "setIsAllowed" }
    : UseContractWriteConfig<TMode, typeof poolManagerABI, "setIsAllowed"> & {
        abi?: never;
        functionName?: "setIsAllowed";
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolManagerABI, "setIsAllowed">({
    abi: poolManagerABI,
    functionName: "setIsAllowed",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setPool"`.
 */
export function usePoolManagerSetPool<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolManagerABI, "setPool">["abi"],
        "setPool"
      > & { functionName?: "setPool" }
    : UseContractWriteConfig<TMode, typeof poolManagerABI, "setPool"> & {
        abi?: never;
        functionName?: "setPool";
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolManagerABI, "setPool">({
    abi: poolManagerABI,
    functionName: "setPool",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setProtocolFee"`.
 */
export function usePoolManagerSetProtocolFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolManagerABI,
          "setProtocolFee"
        >["abi"],
        "setProtocolFee"
      > & { functionName?: "setProtocolFee" }
    : UseContractWriteConfig<TMode, typeof poolManagerABI, "setProtocolFee"> & {
        abi?: never;
        functionName?: "setProtocolFee";
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolManagerABI, "setProtocolFee">({
    abi: poolManagerABI,
    functionName: "setProtocolFee",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setProtocolFeeReceiver"`.
 */
export function usePoolManagerSetProtocolFeeReceiver<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolManagerABI,
          "setProtocolFeeReceiver"
        >["abi"],
        "setProtocolFeeReceiver"
      > & { functionName?: "setProtocolFeeReceiver" }
    : UseContractWriteConfig<
        TMode,
        typeof poolManagerABI,
        "setProtocolFeeReceiver"
      > & {
        abi?: never;
        functionName?: "setProtocolFeeReceiver";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof poolManagerABI,
    "setProtocolFeeReceiver"
  >({
    abi: poolManagerABI,
    functionName: "setProtocolFeeReceiver",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePoolManagerWithdraw<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolManagerABI, "withdraw">["abi"],
        "withdraw"
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<TMode, typeof poolManagerABI, "withdraw"> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolManagerABI, "withdraw">({
    abi: poolManagerABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__.
 */
export function usePreparePoolManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolManagerABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"changeOwner"`.
 */
export function usePreparePoolManagerChangeOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolManagerABI, "changeOwner">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "changeOwner",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "changeOwner">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"momentOfTruth"`.
 */
export function usePreparePoolManagerMomentOfTruth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolManagerABI, "momentOfTruth">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "momentOfTruth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "momentOfTruth">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setBonusPoolPercentForEveryone"`.
 */
export function usePreparePoolManagerSetBonusPoolPercentForEveryone(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof poolManagerABI,
      "setBonusPoolPercentForEveryone"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "setBonusPoolPercentForEveryone",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "setBonusPoolPercentForEveryone">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setDistributorFee"`.
 */
export function usePreparePoolManagerSetDistributorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolManagerABI, "setDistributorFee">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "setDistributorFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "setDistributorFee">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setIsAllowed"`.
 */
export function usePreparePoolManagerSetIsAllowed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolManagerABI, "setIsAllowed">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "setIsAllowed",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "setIsAllowed">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setPool"`.
 */
export function usePreparePoolManagerSetPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolManagerABI, "setPool">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "setPool",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "setPool">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setProtocolFee"`.
 */
export function usePreparePoolManagerSetProtocolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolManagerABI, "setProtocolFee">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "setProtocolFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "setProtocolFee">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"setProtocolFeeReceiver"`.
 */
export function usePreparePoolManagerSetProtocolFeeReceiver(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof poolManagerABI,
      "setProtocolFeeReceiver"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "setProtocolFeeReceiver",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "setProtocolFeeReceiver">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolManagerABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePreparePoolManagerWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolManagerABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolManagerABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolManagerABI, "withdraw">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolManagerABI}__.
 */
export function usePoolManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof poolManagerABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: poolManagerABI,
    ...config,
  } as UseContractEventConfig<typeof poolManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolManagerABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function usePoolManagerOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof poolManagerABI, "OwnerSet">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolManagerABI,
    eventName: "OwnerSet",
    ...config,
  } as UseContractEventConfig<typeof poolManagerABI, "OwnerSet">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dailyPoolABI}__.
 */
export function useDailyPool(
  config: Omit<UseContractConfig, "abi"> = {} as any
) {
  return useContract({ abi: dailyPoolABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__.
 */
export function useDailyPoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dailyPoolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"bonusDistributor"`.
 */
export function useDailyPoolBonusDistributor<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "bonusDistributor">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "bonusDistributor", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "bonusDistributor",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "bonusDistributor", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"currentDay"`.
 */
export function useDailyPoolCurrentDay<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "currentDay">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "currentDay", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "currentDay",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "currentDay", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"dayInfo"`.
 */
export function useDailyPoolDayInfo<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "dayInfo">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "dayInfo", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "dayInfo",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "dayInfo", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"getPrizeTokens"`.
 */
export function useDailyPoolGetPrizeTokens<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "getPrizeTokens">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "getPrizeTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "getPrizeTokens",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "getPrizeTokens", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"getTodaysPrizeTokens"`.
 */
export function useDailyPoolGetTodaysPrizeTokens<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "getTodaysPrizeTokens">
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "getTodaysPrizeTokens",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "getTodaysPrizeTokens",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "getTodaysPrizeTokens", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"getUsersTicketForDay"`.
 */
export function useDailyPoolGetUsersTicketForDay<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "getUsersTicketForDay">
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "getUsersTicketForDay",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "getUsersTicketForDay",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "getUsersTicketForDay", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"getUsersTicketsToday"`.
 */
export function useDailyPoolGetUsersTicketsToday<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "getUsersTicketsToday">
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "getUsersTicketsToday",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "getUsersTicketsToday",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "getUsersTicketsToday", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"largestTicket"`.
 */
export function useDailyPoolLargestTicket<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "largestTicket">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "largestTicket", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "largestTicket",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "largestTicket", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"nTicketsTotal"`.
 */
export function useDailyPoolNTicketsTotal<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "nTicketsTotal">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "nTicketsTotal", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "nTicketsTotal",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "nTicketsTotal", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"pendingRewards"`.
 */
export function useDailyPoolPendingRewards<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "pendingRewards">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "pendingRewards", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "pendingRewards",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "pendingRewards", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"pendingRewardsRange"`.
 */
export function useDailyPoolPendingRewardsRange<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "pendingRewardsRange">
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "pendingRewardsRange",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "pendingRewardsRange",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "pendingRewardsRange", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"poolManager"`.
 */
export function useDailyPoolPoolManager<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "poolManager">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "poolManager", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "poolManager",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "poolManager", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"rewardToken0"`.
 */
export function useDailyPoolRewardToken0<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "rewardToken0">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "rewardToken0", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "rewardToken0",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "rewardToken0", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"rewardToken1"`.
 */
export function useDailyPoolRewardToken1<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "rewardToken1">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "rewardToken1", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "rewardToken1",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "rewardToken1", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"secondLargestTicket"`.
 */
export function useDailyPoolSecondLargestTicket<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "secondLargestTicket">
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "secondLargestTicket",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "secondLargestTicket",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "secondLargestTicket", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"thirdLargestTicket"`.
 */
export function useDailyPoolThirdLargestTicket<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "thirdLargestTicket">
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "thirdLargestTicket",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "thirdLargestTicket",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "thirdLargestTicket", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"ticketsPurchasedForDay"`.
 */
export function useDailyPoolTicketsPurchasedForDay<
  TSelectData = ReadContractResult<
    typeof dailyPoolABI,
    "ticketsPurchasedForDay"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "ticketsPurchasedForDay",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "ticketsPurchasedForDay",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "ticketsPurchasedForDay", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"todaysLargestTicket"`.
 */
export function useDailyPoolTodaysLargestTicket<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "todaysLargestTicket">
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "todaysLargestTicket",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "todaysLargestTicket",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "todaysLargestTicket", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"todaysSecondLargestTicket"`.
 */
export function useDailyPoolTodaysSecondLargestTicket<
  TSelectData = ReadContractResult<
    typeof dailyPoolABI,
    "todaysSecondLargestTicket"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "todaysSecondLargestTicket",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "todaysSecondLargestTicket",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "todaysSecondLargestTicket", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"todaysThirdLargestTicket"`.
 */
export function useDailyPoolTodaysThirdLargestTicket<
  TSelectData = ReadContractResult<
    typeof dailyPoolABI,
    "todaysThirdLargestTicket"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "todaysThirdLargestTicket",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "todaysThirdLargestTicket",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "todaysThirdLargestTicket", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"todaysTickets"`.
 */
export function useDailyPoolTodaysTickets<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "todaysTickets">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "todaysTickets", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "todaysTickets",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "todaysTickets", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"token"`.
 */
export function useDailyPoolToken<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "token">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "token", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "token", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"totalBonusPoolToken"`.
 */
export function useDailyPoolTotalBonusPoolToken<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "totalBonusPoolToken">
>(
  config: Omit<
    UseContractReadConfig<
      typeof dailyPoolABI,
      "totalBonusPoolToken",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "totalBonusPoolToken",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "totalBonusPoolToken", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"totalRewards0"`.
 */
export function useDailyPoolTotalRewards0<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "totalRewards0">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "totalRewards0", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "totalRewards0",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "totalRewards0", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"totalRewards1"`.
 */
export function useDailyPoolTotalRewards1<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "totalRewards1">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "totalRewards1", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "totalRewards1",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "totalRewards1", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"valueInPool"`.
 */
export function useDailyPoolValueInPool<
  TSelectData = ReadContractResult<typeof dailyPoolABI, "valueInPool">
>(
  config: Omit<
    UseContractReadConfig<typeof dailyPoolABI, "valueInPool", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dailyPoolABI,
    functionName: "valueInPool",
    ...config,
  } as UseContractReadConfig<typeof dailyPoolABI, "valueInPool", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__.
 */
export function useDailyPoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dailyPoolABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof dailyPoolABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, TFunctionName>({
    abi: dailyPoolABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"addToPrizeTokens"`.
 */
export function useDailyPoolAddToPrizeTokens<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dailyPoolABI,
          "addToPrizeTokens"
        >["abi"],
        "addToPrizeTokens"
      > & { functionName?: "addToPrizeTokens" }
    : UseContractWriteConfig<TMode, typeof dailyPoolABI, "addToPrizeTokens"> & {
        abi?: never;
        functionName?: "addToPrizeTokens";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "addToPrizeTokens">({
    abi: dailyPoolABI,
    functionName: "addToPrizeTokens",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"buyTickets"`.
 */
export function useDailyPoolBuyTickets<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dailyPoolABI, "buyTickets">["abi"],
        "buyTickets"
      > & { functionName?: "buyTickets" }
    : UseContractWriteConfig<TMode, typeof dailyPoolABI, "buyTickets"> & {
        abi?: never;
        functionName?: "buyTickets";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "buyTickets">({
    abi: dailyPoolABI,
    functionName: "buyTickets",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"claimRewards"`.
 */
export function useDailyPoolClaimRewards<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dailyPoolABI, "claimRewards">["abi"],
        "claimRewards"
      > & { functionName?: "claimRewards" }
    : UseContractWriteConfig<TMode, typeof dailyPoolABI, "claimRewards"> & {
        abi?: never;
        functionName?: "claimRewards";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "claimRewards">({
    abi: dailyPoolABI,
    functionName: "claimRewards",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"depositBonusPoolToken"`.
 */
export function useDailyPoolDepositBonusPoolToken<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dailyPoolABI,
          "depositBonusPoolToken"
        >["abi"],
        "depositBonusPoolToken"
      > & { functionName?: "depositBonusPoolToken" }
    : UseContractWriteConfig<
        TMode,
        typeof dailyPoolABI,
        "depositBonusPoolToken"
      > & {
        abi?: never;
        functionName?: "depositBonusPoolToken";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "depositBonusPoolToken">({
    abi: dailyPoolABI,
    functionName: "depositBonusPoolToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"depositReward"`.
 */
export function useDailyPoolDepositReward<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dailyPoolABI, "depositReward">["abi"],
        "depositReward"
      > & { functionName?: "depositReward" }
    : UseContractWriteConfig<TMode, typeof dailyPoolABI, "depositReward"> & {
        abi?: never;
        functionName?: "depositReward";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "depositReward">({
    abi: dailyPoolABI,
    functionName: "depositReward",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"givePoolTokenToLargestBuyers"`.
 */
export function useDailyPoolGivePoolTokenToLargestBuyers<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dailyPoolABI,
          "givePoolTokenToLargestBuyers"
        >["abi"],
        "givePoolTokenToLargestBuyers"
      > & { functionName?: "givePoolTokenToLargestBuyers" }
    : UseContractWriteConfig<
        TMode,
        typeof dailyPoolABI,
        "givePoolTokenToLargestBuyers"
      > & {
        abi?: never;
        functionName?: "givePoolTokenToLargestBuyers";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof dailyPoolABI,
    "givePoolTokenToLargestBuyers"
  >({
    abi: dailyPoolABI,
    functionName: "givePoolTokenToLargestBuyers",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"givePrizeTokensToOtherPools"`.
 */
export function useDailyPoolGivePrizeTokensToOtherPools<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dailyPoolABI,
          "givePrizeTokensToOtherPools"
        >["abi"],
        "givePrizeTokensToOtherPools"
      > & { functionName?: "givePrizeTokensToOtherPools" }
    : UseContractWriteConfig<
        TMode,
        typeof dailyPoolABI,
        "givePrizeTokensToOtherPools"
      > & {
        abi?: never;
        functionName?: "givePrizeTokensToOtherPools";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof dailyPoolABI,
    "givePrizeTokensToOtherPools"
  >({
    abi: dailyPoolABI,
    functionName: "givePrizeTokensToOtherPools",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"momentOfTruth"`.
 */
export function useDailyPoolMomentOfTruth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dailyPoolABI, "momentOfTruth">["abi"],
        "momentOfTruth"
      > & { functionName?: "momentOfTruth" }
    : UseContractWriteConfig<TMode, typeof dailyPoolABI, "momentOfTruth"> & {
        abi?: never;
        functionName?: "momentOfTruth";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "momentOfTruth">({
    abi: dailyPoolABI,
    functionName: "momentOfTruth",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"setBonusDistributor"`.
 */
export function useDailyPoolSetBonusDistributor<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dailyPoolABI,
          "setBonusDistributor"
        >["abi"],
        "setBonusDistributor"
      > & { functionName?: "setBonusDistributor" }
    : UseContractWriteConfig<
        TMode,
        typeof dailyPoolABI,
        "setBonusDistributor"
      > & {
        abi?: never;
        functionName?: "setBonusDistributor";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "setBonusDistributor">({
    abi: dailyPoolABI,
    functionName: "setBonusDistributor",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"setPoolManager"`.
 */
export function useDailyPoolSetPoolManager<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dailyPoolABI,
          "setPoolManager"
        >["abi"],
        "setPoolManager"
      > & { functionName?: "setPoolManager" }
    : UseContractWriteConfig<TMode, typeof dailyPoolABI, "setPoolManager"> & {
        abi?: never;
        functionName?: "setPoolManager";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "setPoolManager">({
    abi: dailyPoolABI,
    functionName: "setPoolManager",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"withdraw"`.
 */
export function useDailyPoolWithdraw<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dailyPoolABI, "withdraw">["abi"],
        "withdraw"
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<TMode, typeof dailyPoolABI, "withdraw"> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any
) {
  return useContractWrite<TMode, typeof dailyPoolABI, "withdraw">({
    abi: dailyPoolABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__.
 */
export function usePrepareDailyPoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"addToPrizeTokens"`.
 */
export function usePrepareDailyPoolAddToPrizeTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "addToPrizeTokens">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "addToPrizeTokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "addToPrizeTokens">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"buyTickets"`.
 */
export function usePrepareDailyPoolBuyTickets(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "buyTickets">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "buyTickets",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "buyTickets">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"claimRewards"`.
 */
export function usePrepareDailyPoolClaimRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "claimRewards">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "claimRewards",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "claimRewards">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"depositBonusPoolToken"`.
 */
export function usePrepareDailyPoolDepositBonusPoolToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "depositBonusPoolToken">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "depositBonusPoolToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "depositBonusPoolToken">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"depositReward"`.
 */
export function usePrepareDailyPoolDepositReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "depositReward">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "depositReward",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "depositReward">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"givePoolTokenToLargestBuyers"`.
 */
export function usePrepareDailyPoolGivePoolTokenToLargestBuyers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dailyPoolABI,
      "givePoolTokenToLargestBuyers"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "givePoolTokenToLargestBuyers",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "givePoolTokenToLargestBuyers">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"givePrizeTokensToOtherPools"`.
 */
export function usePrepareDailyPoolGivePrizeTokensToOtherPools(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dailyPoolABI,
      "givePrizeTokensToOtherPools"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "givePrizeTokensToOtherPools",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "givePrizeTokensToOtherPools">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"momentOfTruth"`.
 */
export function usePrepareDailyPoolMomentOfTruth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "momentOfTruth">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "momentOfTruth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "momentOfTruth">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"setBonusDistributor"`.
 */
export function usePrepareDailyPoolSetBonusDistributor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "setBonusDistributor">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "setBonusDistributor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "setBonusDistributor">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"setPoolManager"`.
 */
export function usePrepareDailyPoolSetPoolManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "setPoolManager">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "setPoolManager",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "setPoolManager">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dailyPoolABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareDailyPoolWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dailyPoolABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dailyPoolABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dailyPoolABI, "withdraw">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bonusDistributorABI}__.
 */
export function useBonusDistributor(
  config: Omit<UseContractConfig, "abi"> = {} as any
) {
  return useContract({ abi: bonusDistributorABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bonusDistributorABI}__.
 */
export function useBonusDistributorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bonusDistributorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof bonusDistributorABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: bonusDistributorABI,
    ...config,
  } as UseContractReadConfig<typeof bonusDistributorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"amountToTake"`.
 */
export function useBonusDistributorAmountToTake<
  TSelectData = ReadContractResult<typeof bonusDistributorABI, "amountToTake">
>(
  config: Omit<
    UseContractReadConfig<
      typeof bonusDistributorABI,
      "amountToTake",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bonusDistributorABI,
    functionName: "amountToTake",
    ...config,
  } as UseContractReadConfig<typeof bonusDistributorABI, "amountToTake", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"amountToTakeWithRollOver"`.
 */
export function useBonusDistributorAmountToTakeWithRollOver<
  TSelectData = ReadContractResult<
    typeof bonusDistributorABI,
    "amountToTakeWithRollOver"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof bonusDistributorABI,
      "amountToTakeWithRollOver",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bonusDistributorABI,
    functionName: "amountToTakeWithRollOver",
    ...config,
  } as UseContractReadConfig<typeof bonusDistributorABI, "amountToTakeWithRollOver", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"canTake"`.
 */
export function useBonusDistributorCanTake<
  TSelectData = ReadContractResult<typeof bonusDistributorABI, "canTake">
>(
  config: Omit<
    UseContractReadConfig<typeof bonusDistributorABI, "canTake", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bonusDistributorABI,
    functionName: "canTake",
    ...config,
  } as UseContractReadConfig<typeof bonusDistributorABI, "canTake", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"poolManager"`.
 */
export function useBonusDistributorPoolManager<
  TSelectData = ReadContractResult<typeof bonusDistributorABI, "poolManager">
>(
  config: Omit<
    UseContractReadConfig<
      typeof bonusDistributorABI,
      "poolManager",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bonusDistributorABI,
    functionName: "poolManager",
    ...config,
  } as UseContractReadConfig<typeof bonusDistributorABI, "poolManager", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"rollOver"`.
 */
export function useBonusDistributorRollOver<
  TSelectData = ReadContractResult<typeof bonusDistributorABI, "rollOver">
>(
  config: Omit<
    UseContractReadConfig<typeof bonusDistributorABI, "rollOver", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bonusDistributorABI,
    functionName: "rollOver",
    ...config,
  } as UseContractReadConfig<typeof bonusDistributorABI, "rollOver", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"token"`.
 */
export function useBonusDistributorToken<
  TSelectData = ReadContractResult<typeof bonusDistributorABI, "token">
>(
  config: Omit<
    UseContractReadConfig<typeof bonusDistributorABI, "token", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bonusDistributorABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<typeof bonusDistributorABI, "token", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__.
 */
export function useBonusDistributorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bonusDistributorABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof bonusDistributorABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof bonusDistributorABI, TFunctionName>({
    abi: bonusDistributorABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"setCanTake"`.
 */
export function useBonusDistributorSetCanTake<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bonusDistributorABI,
          "setCanTake"
        >["abi"],
        "setCanTake"
      > & { functionName?: "setCanTake" }
    : UseContractWriteConfig<
        TMode,
        typeof bonusDistributorABI,
        "setCanTake"
      > & {
        abi?: never;
        functionName?: "setCanTake";
      } = {} as any
) {
  return useContractWrite<TMode, typeof bonusDistributorABI, "setCanTake">({
    abi: bonusDistributorABI,
    functionName: "setCanTake",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"setPoolManager"`.
 */
export function useBonusDistributorSetPoolManager<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bonusDistributorABI,
          "setPoolManager"
        >["abi"],
        "setPoolManager"
      > & { functionName?: "setPoolManager" }
    : UseContractWriteConfig<
        TMode,
        typeof bonusDistributorABI,
        "setPoolManager"
      > & {
        abi?: never;
        functionName?: "setPoolManager";
      } = {} as any
) {
  return useContractWrite<TMode, typeof bonusDistributorABI, "setPoolManager">({
    abi: bonusDistributorABI,
    functionName: "setPoolManager",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"setRollOver"`.
 */
export function useBonusDistributorSetRollOver<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bonusDistributorABI,
          "setRollOver"
        >["abi"],
        "setRollOver"
      > & { functionName?: "setRollOver" }
    : UseContractWriteConfig<
        TMode,
        typeof bonusDistributorABI,
        "setRollOver"
      > & {
        abi?: never;
        functionName?: "setRollOver";
      } = {} as any
) {
  return useContractWrite<TMode, typeof bonusDistributorABI, "setRollOver">({
    abi: bonusDistributorABI,
    functionName: "setRollOver",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"take"`.
 */
export function useBonusDistributorTake<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bonusDistributorABI, "take">["abi"],
        "take"
      > & { functionName?: "take" }
    : UseContractWriteConfig<TMode, typeof bonusDistributorABI, "take"> & {
        abi?: never;
        functionName?: "take";
      } = {} as any
) {
  return useContractWrite<TMode, typeof bonusDistributorABI, "take">({
    abi: bonusDistributorABI,
    functionName: "take",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"takeAll"`.
 */
export function useBonusDistributorTakeAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bonusDistributorABI,
          "takeAll"
        >["abi"],
        "takeAll"
      > & { functionName?: "takeAll" }
    : UseContractWriteConfig<TMode, typeof bonusDistributorABI, "takeAll"> & {
        abi?: never;
        functionName?: "takeAll";
      } = {} as any
) {
  return useContractWrite<TMode, typeof bonusDistributorABI, "takeAll">({
    abi: bonusDistributorABI,
    functionName: "takeAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"takeWithRollover"`.
 */
export function useBonusDistributorTakeWithRollover<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bonusDistributorABI,
          "takeWithRollover"
        >["abi"],
        "takeWithRollover"
      > & { functionName?: "takeWithRollover" }
    : UseContractWriteConfig<
        TMode,
        typeof bonusDistributorABI,
        "takeWithRollover"
      > & {
        abi?: never;
        functionName?: "takeWithRollover";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof bonusDistributorABI,
    "takeWithRollover"
  >({
    abi: bonusDistributorABI,
    functionName: "takeWithRollover",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"withdraw"`.
 */
export function useBonusDistributorWithdraw<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bonusDistributorABI,
          "withdraw"
        >["abi"],
        "withdraw"
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<TMode, typeof bonusDistributorABI, "withdraw"> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any
) {
  return useContractWrite<TMode, typeof bonusDistributorABI, "withdraw">({
    abi: bonusDistributorABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__.
 */
export function usePrepareBonusDistributorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bonusDistributorABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bonusDistributorABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bonusDistributorABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"setCanTake"`.
 */
export function usePrepareBonusDistributorSetCanTake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bonusDistributorABI, "setCanTake">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bonusDistributorABI,
    functionName: "setCanTake",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bonusDistributorABI, "setCanTake">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"setPoolManager"`.
 */
export function usePrepareBonusDistributorSetPoolManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bonusDistributorABI, "setPoolManager">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bonusDistributorABI,
    functionName: "setPoolManager",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bonusDistributorABI, "setPoolManager">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"setRollOver"`.
 */
export function usePrepareBonusDistributorSetRollOver(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bonusDistributorABI, "setRollOver">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bonusDistributorABI,
    functionName: "setRollOver",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bonusDistributorABI, "setRollOver">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"take"`.
 */
export function usePrepareBonusDistributorTake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bonusDistributorABI, "take">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bonusDistributorABI,
    functionName: "take",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bonusDistributorABI, "take">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"takeAll"`.
 */
export function usePrepareBonusDistributorTakeAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bonusDistributorABI, "takeAll">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bonusDistributorABI,
    functionName: "takeAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bonusDistributorABI, "takeAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"takeWithRollover"`.
 */
export function usePrepareBonusDistributorTakeWithRollover(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bonusDistributorABI,
      "takeWithRollover"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bonusDistributorABI,
    functionName: "takeWithRollover",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bonusDistributorABI, "takeWithRollover">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bonusDistributorABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareBonusDistributorWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bonusDistributorABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bonusDistributorABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bonusDistributorABI, "withdraw">);
}
